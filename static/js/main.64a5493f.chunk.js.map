{"version":3,"sources":["getWeb3.js","Navbar.js","TokenFarmCard.js","components/LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Navbar","className","rel","id","this","props","account","alt","width","height","src","Identicon","toString","Component","TokenFarmCard","scope","stakingBalance","deXTokenBalance","Card","onSubmit","event","amount","preventDefault","input","value","stakeTokens","daiTokenBalance","type","ref","placeholder","required","onClick","unstakeTokens","LoadingSpinner","msg","Spinner","animation","role","App","state","accounts","signedInAccount","mockDaiToken","deXToken","deXTokenFarm","loading","componentDidMount","eth","getAccounts","setState","net","getId","networkId","mockDaiTokenData","MockDaiToken","networks","Contract","abi","address","methods","balanceOf","call","utils","fromWei","alert","deXTokenData","DeXToken","deXFarmData","DeXTokenFarm","stackingBalance","error","toWei","approve","_address","send","from","on","hash","stackTokens","content","style","maxWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64a5493f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Identicon from \"identicon.js\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <div\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          DeX Token Farm\r\n        </div>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nac-ite text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-secondary\">\r\n              <small id=\"account\"> {this.props.account}</small>\r\n            </small>\r\n            {this.props.account ? (\r\n              <img\r\n                className=\"ml-2\"\r\n                alt=\"description of image\"\r\n                width=\"30\"\r\n                height=\"30\"\r\n                src={`data:image/png;base64,${new Identicon(\r\n                  this.props.account,\r\n                  30\r\n                ).toString()}`}\r\n              />\r\n            ) : (\r\n              <span> </span>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nclass TokenFarmCard extends Component {\n  render() {\n    return (\n      <div>\n        <div id=\"content\" className=\"mt-3\">\n          <table className=\"table table-borderless text-muted text-center\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Staking Balance</th>\n                <th scope=\"col\">Reward Balance</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>{this.props.stakingBalance} mDAI</td>\n                <td>{this.props.deXTokenBalance} DAPP</td>\n              </tr>\n            </tbody>\n          </table>\n          <Card className=\"card mb-4\">\n            <div className=\"card-body\">\n              <form\n                className=\"mb-3\"\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  let amount;\n                  amount = this.input.value.toString();\n                  this.props.stakeTokens(amount);\n                }}\n              >\n                <div>\n                  <label className=\"float-left\">\n                    <b>Stake Tokens</b>\n                  </label>\n                  <span className=\"float-right text-muted\">\n                    Balance: {this.props.daiTokenBalance}\n                  </span>\n                </div>\n                <div className=\"input-group mb-4\">\n                  <input\n                    type=\"text\"\n                    ref={(input) => {\n                      this.input = input;\n                    }}\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"0\"\n                    required\n                  />\n                  <div className=\"input-group-append\">\n                    <div className=\"input-group-text\">\n                      {/* <img src={dai} height=\"32\" alt=\"\" /> */}\n                      &nbsp;&nbsp;&nbsp; mDAI\n                    </div>\n                  </div>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary btn-block btn-lg\"\n                >\n                  STAKE!\n                </button>\n              </form>\n              <button\n                type=\"submit\"\n                className=\"btn btn-link btn-block btn-sm\"\n                onClick={(event) => {\n                  event.preventDefault();\n                  this.props.unstakeTokens();\n                }}\n              >\n                UN-STAKE...\n              </button>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TokenFarmCard;\n","import React, { Component } from \"react\";\r\n\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nclass LoadingSpinner extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h5> {this.props.msg} </h5> <Spinner animation=\"border\" role=\"status\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport MockDaiToken from \"./contracts/MockDaiToken.json\";\nimport DeXToken from \"./contracts/DeXToken.json\";\nimport DeXTokenFarm from \"./contracts/DeXTokenFarm.json\";\nimport Navbar from \"./Navbar\";\nimport TokenFarmCard from \"./TokenFarmCard\";\nimport LoadingSpinner from \"./components/LoadingSpinner\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    signedInAccount: \"0x0\",\n    mockDaiToken: {},\n    deXToken: {},\n    deXTokenFarm: {},\n    daiTokenBalance: \"0\",\n    deXTokenBalance: \"0\",\n    stakingBalance: \"0\",\n    loading: true,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({\n        web3,\n        accounts,\n        signedInAccount: accounts[0],\n      });\n      // get network id\n      const networkId = await web3.eth.net.getId();\n\n      // Get the mock dai token contract instance.\n      const mockDaiTokenData = MockDaiToken.networks[networkId];\n      if (mockDaiTokenData) {\n        const mockDaiToken = new web3.eth.Contract(\n          MockDaiToken.abi,\n          mockDaiTokenData.address\n        );\n        this.setState({ mockDaiToken });\n        let daiTokenBalance = await mockDaiToken.methods\n          .balanceOf(this.state.signedInAccount)\n          .call();\n        daiTokenBalance = this.state.web3.utils.fromWei(\n          daiTokenBalance.toString(),\n          \"Ether\"\n        );\n        this.setState({ daiTokenBalance });\n      } else {\n        window.alert(\"Mock Dai Token is not deployed on the detected network\");\n      }\n\n      const deXTokenData = DeXToken.networks[networkId];\n      if (deXTokenData) {\n        const deXToken = new web3.eth.Contract(\n          DeXToken.abi,\n          deXTokenData.address\n        );\n        this.setState({ deXToken });\n        let deXTokenBalance = await deXToken.methods\n          .balanceOf(this.state.signedInAccount)\n          .call();\n        deXTokenBalance = this.state.web3.utils.fromWei(\n          deXTokenBalance.toString(),\n          \"Ether\"\n        );\n        this.setState({ deXTokenBalance });\n      } else {\n        window.alert(\"DeX Token is not deployed on the detected network\");\n      }\n\n      const deXFarmData = DeXTokenFarm.networks[networkId];\n      if (deXTokenData) {\n        const deXTokenFarm = new web3.eth.Contract(\n          DeXTokenFarm.abi,\n          deXFarmData.address\n        );\n        this.setState({ deXTokenFarm });\n        let stakingBalance = await deXTokenFarm.methods\n          .stackingBalance(this.state.signedInAccount)\n          .call();\n        stakingBalance = this.state.web3.utils.fromWei(\n          stakingBalance.toString(),\n          \"Ether\"\n        );\n        this.setState({ stakingBalance });\n      } else {\n        window.alert(\"DeX Token Farm is not deployed on the detected network\");\n      }\n      this.setState({ loading: false });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  stakeTokens = (amount) => {\n    amount = this.state.web3.utils.toWei(amount, \"Ether\");\n\n    this.setState({ loading: true });\n    this.state.mockDaiToken.methods\n      .approve(this.state.deXTokenFarm._address, amount)\n      .send({ from: this.state.signedInAccount })\n      .on(\"transactionHash\", (hash) => {\n        this.state.deXTokenFarm.methods\n          .stackTokens(amount)\n          .send({ from: this.state.signedInAccount })\n          .on(\"transactionHash\", (hash) => {\n            this.setState({ loading: false });\n          });\n      });\n  };\n\n  unstakeTokens = (amount) => {\n    this.setState({ loading: true });\n    this.state.deXTokenFarm.methods\n      .unstakeTokens()\n      .send({ from: this.state.signedInAccount })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    let content;\n    if (this.state.loading) {\n      return (\n        <LoadingSpinner msg=\"Loading Web3, Accounts and Contract...\"></LoadingSpinner>\n      );\n    } else {\n      content = (\n        <TokenFarmCard\n          daiTokenBalance={this.state.daiTokenBalance}\n          deXTokenBalance={this.state.deXTokenBalance}\n          stakingBalance={this.state.stakingBalance}\n          stakeTokens={this.stakeTokens}\n          unstakeTokens={this.unstakeTokens}\n        ></TokenFarmCard>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <Navbar account={this.state.signedInAccount}> </Navbar>\n\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main\n              role=\"main\"\n              className=\"col-lg-12 ml-auto mr-auto\"\n              style={{ maxWidth: \"600px\" }}\n            >\n              <div className=\"content mr-auto ml-auto\">{content}</div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}